diff --git a/node_modules/scraper-instagram/index.js b/node_modules/scraper-instagram/index.js
index dba1347..0497514 100644
--- a/node_modules/scraper-instagram/index.js
+++ b/node_modules/scraper-instagram/index.js
@@ -66,7 +66,9 @@ const self = {
 					resolve(body);
 				}
 			});
-			res.on('error', reject);
+			res.on('error', () => {
+				return reject()
+			});
 		});
 	}),
 	search: (query, sessionId) => new Promise((resolve, reject) => self.get('web/search/topsearch', sessionId, false, { context: 'blended', query })
@@ -97,69 +99,133 @@ const self = {
 		likes: comment['node']['edge_liked_by']['count']
 	}),
 	fullPost: post => {
-		const
-			caption = post['edge_media_to_caption']['edges'].length > 0
-				? post['edge_media_to_caption']['edges'][0]['node']['text'] : null,
-			username = post['owner']['username'],
-			shortcode = post['shortcode'];
+		// let caption = null;
+		// if ( post['edge_media_to_caption'] && post['edge_media_to_caption']['edges'] ) {
+		// 	caption = post['edge_media_to_caption']['edges'].length > 0 ? post['edge_media_to_caption']['edges'][0]['node']['text'] : null;
+		// } 
+
+		let username = post['user']['username'];
+		let shortcode = post['code'];
+
+		function getContents(post) {
+			if ( post.product_type == 'carousel_container' ) {
+				return post.carousel_media.map( cm => {
+					let ow = cm.original_width;
+					let oh = cm.original_height;
+					let id = cm.pk;
+					return {
+						id,
+						type: 'photo',
+						url: cm.image_versions2.candidates.find(c => c.width == ow && c.height == oh).url
+					}
+				})
+		
+			} else if ( post.product_type == 'to do' ) {
+				return [ 'not implemented yet' ]
+			} else if ( post.product_type == 'todo again') {
+				return [ 'not implemented yet' ]
+			}
+		}
+
 		return {
 			shortcode,
-			author: {
-				id: post['owner']['id'],
-				username,
-				name: post['owner']['full_name'],
-				pic: post['owner']['profile_pic_url'],
-				verified: post['owner']['is_verified'],
-				link: `${ insta }/${ username }`
+			"author": {
+				"id": post.user.pk,
+				"username": username,
+				"name": post.user.full_name,
+				"pic": post.user.profile_pic_url,
+				"verified": post.user.is_verified,
+				"link": `${ insta }/${username}`
 			},
-			location: post['location'] ? {
-				id: post['location']['id'],
-				name: post['location']['name'],
-				...(post['location']['address_json'] ? {
-					city: JSON.parse(post['location']['address_json'])['city_name']
-				} : {})
-			} : null,
-			...(post['__typename'] === 'GraphImage' ? {
-				contents: [{
-					type: 'photo',
-					url: post['display_url']
-				}]
-			} : {}),
-			...(post['__typename'] === 'GraphVideo' ? {
-				contents: [{
-					type: 'video',
-					url: post['video_url'],
-					thumbnail: post['display_url'],
-					views: post['video_view_count']
-				}]
-			} : {}),
-			...(post['__typename'] === 'GraphSidecar' ? {
-				contents: post['edge_sidecar_to_children']['edges']
-					.map(content => ({
-						type: content['node']['is_video'] ? 'video' : 'photo',
-						url: content['node']['is_video'] ? content['node']['video_url'] : content['node']['display_url'],
-						...(content['node']['is_video'] ? {
-							thumbnail: content['node']['display_url'],
-							views: content['node']['video_view_count']
-						} : {})
-					}))
-			} : {}),
-			...(post['edge_media_to_tagged_user'] ? {
-				tagged: post['edge_media_to_tagged_user']['edges']
-					.map(u => u['node']['user']['username'])
-			} : {}),
-			likes: post['edge_media_preview_like']['count'],
-			caption,
-			hashtags: caption ? caption.match(self.hashtagsRegex) : null,
-			mentions: caption ? caption.match(self.usernamesRegex) : null,
-			edited: post['caption_is_edited'] || false,
-			...(post['edge_media_preview_comment'] ? {
-				comments: post['comments_disabled'] ? null : post['edge_media_preview_comment']['edges'].map(self.postComment),
-				commentCount: post['edge_media_preview_comment']['count']
-			} : {}),
-			timestamp: post['taken_at_timestamp'],
-			link: insta + 'p/' + shortcode
+			"location": {
+				"id": post.location.pk,
+				"name": post.location.name,
+				"city": post.location.city
+			},
+			"contents": getContents(post),
+			"tagged": [],
+			"likes": post.like_count,
+			"caption": post.caption ? post.caption.text : '',
+			"hashtags": post.caption && post.caption.text ? post.caption.text.match(self.hashtagsRegex) : null,
+			"mentions": post.caption && post.caption.text ? post.caption.text.match(self.usernamesRegex) : null,
+			"edited": post.caption_is_edited,
+			"comments": post.comments.map(c => {
+				return {
+					"id": c.pk,
+					"user": c.user.username,
+					"content": c.text,
+					"timestamp": c.created_at_utc,
+					"hashtags": c.text.match(self.hashtagsRegex),
+					"mentions": c.text.match(self.usernamesRegex),
+					"likes": c.comment_like_count
+				}
+			}),
+			"commentCount": post.comment_count,
+			"timestamp": post.device_timestamp,
+			"link": `${ insta }/p/${shortcode}`
 		}
+
+
+		// username = post['owner']['username'],
+		// shortcode = post['shortcode'];
+		// return {
+		// 	shortcode,
+		// 	author: {
+		// 		id: post['owner']['id'],
+		// 		username,
+		// 		name: post['owner']['full_name'],
+		// 		pic: post['owner']['profile_pic_url'],
+		// 		verified: post['owner']['is_verified'],
+		// 		link: `${ insta }/${ username }`
+		// 	},
+		// 	location: post['location'] ? {
+		// 		id: post['location']['id'],
+		// 		name: post['location']['name'],
+		// 		...(post['location']['address_json'] ? {
+		// 			city: JSON.parse(post['location']['address_json'])['city_name']
+		// 		} : {})
+		// 	} : null,
+		// 	...(post['__typename'] === 'GraphImage' ? {
+		// 		contents: [{
+		// 			type: 'photo',
+		// 			url: post['display_url']
+		// 		}]
+		// 	} : {}),
+		// 	...(post['__typename'] === 'GraphVideo' ? {
+		// 		contents: [{
+		// 			type: 'video',
+		// 			url: post['video_url'],
+		// 			thumbnail: post['display_url'],
+		// 			views: post['video_view_count']
+		// 		}]
+		// 	} : {}),
+		// 	...(post['__typename'] === 'GraphSidecar' ? {
+		// 		contents: post['edge_sidecar_to_children']['edges']
+		// 			.map(content => ({
+		// 				type: content['node']['is_video'] ? 'video' : 'photo',
+		// 				url: content['node']['is_video'] ? content['node']['video_url'] : content['node']['display_url'],
+		// 				...(content['node']['is_video'] ? {
+		// 					thumbnail: content['node']['display_url'],
+		// 					views: content['node']['video_view_count']
+		// 				} : {})
+		// 			}))
+		// 	} : {}),
+		// 	...(post['edge_media_to_tagged_user'] ? {
+		// 		tagged: post['edge_media_to_tagged_user']['edges']
+		// 			.map(u => u['node']['user']['username'])
+		// 	} : {}),
+		// 	likes: post['edge_media_preview_like']['count'],
+		// 	caption,
+		// 	hashtags: caption ? caption.match(self.hashtagsRegex) : null,
+		// 	mentions: caption ? caption.match(self.usernamesRegex) : null,
+		// 	edited: post['caption_is_edited'] || false,
+		// 	...(post['edge_media_preview_comment'] ? {
+		// 		comments: post['comments_disabled'] ? null : post['edge_media_preview_comment']['edges'].map(self.postComment),
+		// 		commentCount: post['edge_media_preview_comment']['count']
+		// 	} : {}),
+		// 	timestamp: post['taken_at_timestamp'],
+		// 	link: insta + 'p/' + shortcode
+		// }
 	}
 };
 
@@ -248,53 +314,55 @@ module.exports = class Insta {
 		});
 	}
 	getProfile(username = this.username, anonymous = false){
-		return new Promise((resolve, reject) => self.get(username, anonymous ? null : this.sessionId)
-			.then(profile => {
-				const
-					id = profile['id'],
-					access = !profile['is_private'] || !!profile['followed_by_viewer'] || profile['username'] === this.username;
-				profileIds[username] = id;
-				resolve({
-					id,
-					name: profile['full_name'],
-					pic: profile['profile_pic_url_hd'],
-					bio: profile['biography'],
-					private: profile['is_private'],
-					access,
-					verified: profile['is_verified'],
-					website: profile['external_url'],
-					followers: profile['edge_followed_by']['count'],
-					following: profile['edge_follow']['count'],
-					posts: profile['edge_owner_to_timeline_media']['count'],
-					lastPosts: access ? profile['edge_owner_to_timeline_media']['edges'].map(post => self.partialPost(post)) : null,
-					link: insta + profile['username'],
-					...(profile['is_business_account'] ? {
-						business: profile['business_category_name']
-					} : {}),
-					...(this.sessionId ? {
-						user: {
-							mutualFollowers: profile['edge_mutual_followed_by']['edges'].map(item => item['node']['username']),
-							blocking: profile['blocked_by_viewer'],
-							blocked: profile['has_blocked_viewer'],
-							requesting: profile['requested_by_viewer'],
-							requested: profile['has_requested_viewer'],
-							following: profile['followed_by_viewer'],
-							followed: profile['follows_viewer']
-						}
-					} : {})
-				});
-			})
-			.catch(err => {
-				if(err === 204){
-					this.getProfile(username, true)
-						.then(profile => resolve(Object.assign(profile, {
-							user: { blocked: true }
-						})))
-						.catch(reject);
-				}
-				else
-					reject(err);
-			}));
+		return new Promise((resolve, reject) => {
+			return self.get(username, anonymous ? null : this.sessionId)
+				.then(profile => {
+					const
+						id = profile['id'],
+						access = !profile['is_private'] || !!profile['followed_by_viewer'] || profile['username'] === this.username;
+					profileIds[username] = id;
+					resolve({
+						id,
+						name: profile['full_name'],
+						pic: profile['profile_pic_url_hd'],
+						bio: profile['biography'],
+						private: profile['is_private'],
+						access,
+						verified: profile['is_verified'],
+						website: profile['external_url'],
+						followers: profile['edge_followed_by']['count'],
+						following: profile['edge_follow']['count'],
+						posts: profile['edge_owner_to_timeline_media']['count'],
+						lastPosts: access ? profile['edge_owner_to_timeline_media']['edges'].map(post => self.partialPost(post)) : null,
+						link: insta + profile['username'],
+						...(profile['is_business_account'] ? {
+							business: profile['business_category_name']
+						} : {}),
+						...(this.sessionId ? {
+							user: {
+								mutualFollowers: profile['edge_mutual_followed_by']['edges'].map(item => item['node']['username']),
+								blocking: profile['blocked_by_viewer'],
+								blocked: profile['has_blocked_viewer'],
+								requesting: profile['requested_by_viewer'],
+								requested: profile['has_requested_viewer'],
+								following: profile['followed_by_viewer'],
+								followed: profile['follows_viewer']
+							}
+						} : {})
+					});
+				})
+				.catch(err => {
+					if(err === 204){
+						this.getProfile(username, true)
+							.then(profile => resolve(Object.assign(profile, {
+								user: { blocked: true }
+							})))
+							.catch(reject);
+					}
+					else
+						reject(err);
+				})
+			});
 	}
 	async _getProfileId(username){
 		if(!profileIds[username])
